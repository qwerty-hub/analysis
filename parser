import requests_html
import sqlite3
from bs4 import BeautifulSoup
import pickle
import requests





class Proxy(object):
    def __init__(self, address, port, country, speed, delay):
        self.address = address
        self.port = port
        self.country = country
        self.speed = speed
        self.delay = delay

def createDb():
    connection = sqlite3.connect('proxy.db')
    cursor = connection.cursor()
    # добавить атрибуты
    cursor.execute('''CREATE TABLE IF NOT EXISTS ProxyList
                    (Address TEXT UNIQUE, Port TEXT)''')
    connection.commit()
    connection.close()

def printDb():
    connection = sqlite3.connect('proxy.db')
    cursor = connection.cursor()
    records = cursor.execute("SELECT * FROM ProxyList")
    print(cursor.fetchall())
    connection.commit()
    connection.close()




def scrap_proxy():
    connection = sqlite3.connect('proxy.db')
    cursor = connection.cursor()
    proxylist = list()
    session = requests_html.HTMLSession()
    #..https://free-proxy-list.net/ proxy updates every 10 minutes
    #на странице 20 записей
    r = session.get('https://free-proxy-list.net/')
    r.html.render()
    for i in range(1, 21):
        address = r.html.xpath('/html/body/section[1]/div/div[2]/div/div[2]/div/table/tbody/tr[{}]/td[1]/text()'.format(i))[0]
        port = r.html.xpath('/html/body/section[1]/div/div[2]/div/div[2]/div/table/tbody/tr[{}]/td[2]/text()'.format(i))[0]
        proxylist.append([address,port])
    cursor.executemany("INSERT INTO ProxyList (Address, port) VALUES (?, ?)", proxylist)
    connection.commit()
    connection.close()

createDb()
scrap_proxy()
printDb()
'''
StockList = list()
SiteList = table.find('tbody').find_all('tr')
con = psycopg2.connect(
  database="analytics",
  user="postgres",
  password="031972",
  host="127.0.0.1",
  port="5432"
)
engine = create_engine('postgresql://postgres:031972@localhost:5432/analytics')
metadata1 = MetaData()
stocksDoxod = Table('DoxodStocks',metadata1,autoload=True, autoload_with=engine)
mapper(StockDoxod, stocksDoxod)
metadata1.create_all(engine)
sm1 = orm.sessionmaker(bind=engine, autoflush=True, autocommit=False, expire_on_commit=True)
session1 = orm.scoped_session(sm1)
session1.flush()
print(len(SiteList))
for i in SiteList:
    try:
        session1.add(
            StockDoxod(
                    stock= re.sub(r'\s+', ' ', i.find_all('td')[1].text.replace("-",'0')),  #stock
                    sector= re.sub(r'\s+', ' ', i.find_all('td')[2].text.replace("-",'0')),  #sector
                    DCF = re.sub(r'\s+', ' ', i.find_all('td')[6].text.replace("-",'0')),  #dcf
                    grow = re.sub(r'\s+', ' ', i.find_all('td')[8].text.replace("-",'0')),  #grow
                    PE = re.sub(r'\s+', ' ', i.find_all('td')[9].text.replace("-",'0')),  #pe
                    Strategy1 = re.sub(r'\s+', ' ', i.find_all('td')[10].text.replace("-",'0')), #strategy1
                    PBV = re.sub(r'\s+', ' ', i.find_all('td')[12].text.replace("-",'0')), #pbv
                    ROE = re.sub(r'\s+', ' ', i.find_all('td')[13].text.replace("-",'0')), #roe
                    Strategy2 = re.sub(r'\s+', ' ', i.find_all('td')[14].text.replace("-",'0')), #strategy2
                    EVEBIT = re.sub(r'\s+', ' ', i.find_all('td')[16].text.replace("-",'0')), #evebit
                    ROCE = re.sub(r'\s+', ' ', i.find_all('td')[17].text.replace("-",'0')), #roce
                    Strategy3 = re.sub(r'\s+', ' ', i.find_all('td')[18].text.replace("-",'0')), #strategy3
                    Yield = re.sub(r'\s+', ' ', i.find_all('td')[20].text.replace("-",'0')), #yield
                    DSI = re.sub(r'\s+', ' ', i.find_all('td')[21].text.replace("-",'0')), #dsi
                    Strategy4 = re.sub(r'\s+', ' ', i.find_all('td')[22].text.replace("-",'0')), #strategy4
                    Why = re.sub(r'\s+', ' ', i.find_all('td')[23].text.replace("-",'0')), #why
                    id =  re.sub(r'\s+', ' ', i.find_all('td')[25].text.replace("-",'0'))
            )
        )

    except exc.SQLAlchemyError:
        pass
    try:
        session1.commit()
    except sqlalchemy.exc.IntegrityError:
        pass
session1.close()
'''